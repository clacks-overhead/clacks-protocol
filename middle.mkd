# Introduction

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc subcompact="no"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>

While IP-SFS [](#RFC4824) makes it possible to transmit Internet protocols
over semaphore signalling systems such as Clacks, the reverse is not always
the case. Information sent in the Overhead may be lost when Clacks messages
are sent using HTTP.

This document specifies HTTP headers for transmitting Overhead messages
that originate or are intended for Clacks towers.

## Syntax Notation

This specification uses the Augmented Backus-Naur Form (ABNF) notation of [](#RFC5234)
and includes, by reference, the "token", "word", "OWS", and "BWS" rules and
the #rule extension as defined within Sections 3.2.1 and 3.2.4 of [](#RFC7230).

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
interpreted as described in [](#RFC2119).

# The Clacks Protocol

Clacks is a semaphore signalling system invented by Robert Dearheart. It is the primary means of communication between city-states along The Grand Trunk. Like most protocols Clacks has a Header (called the Overhead) and Payload. The Overhead contains information about (among other things) source, destination, message detail, logging, and mechanism control. This document doesn't define the Clacks protocol, only it's delivery over HTTP. The Clacks protocol definition is owned by The Grand Trunk Semaphore Company, Ankh Morpork.

All Overhead messages begin with a Clacks Code. A Code is a sequence of upper-case letters. Each letter determines how the message and the order of letters is significant. Some instructions require a Tower Address which is sent immediately after the Code. The Code and Tower Address are always sent in the Plain.

The Overhead body may be encoded to shorten the message or conceal it from eavesdropping. A message that is not encoded is sent "in the Plain" or just "Plain" In many cases the Code alone is sufficient instruction to the Clacks operator and further interpretation of the message body is not required. For this reason Clacks operators, and thus HTTP clients and servers, MUST be able to accept messages with an unknown encoding.

# Clacks over HTTP Protocol Additions

The Clacks over HTTP extension specifies one header field which MAY be included
in a HTTP request or response.

## The Clacks response field

The Clacks header field is used to transmit Overhead messages in an 
HTTP response or request. The Accept-Clacks header field is sent in
an HTTP request to indicate to a server that a client is able to
process Overhead messages. In the absence of an Accept-Clacks header
a server MAY respond with a Clacks message in the hope [HOPE](Vetinari, H., "The Greatest Gift")
that the client can do something with it and merely forgot to send the
Accept-Clacks header.

An Overhead message consists of a Clacks Code, an optional Tower Address, and a possibly encoded message body.

    Clacks          = 1#clacks-overhead
    clacks-overhead = clacks-code [ RWS tower-address ] RWS value
    tower-address   = token
    clacks-code     = 1*codechar
    codechar        = ALPHA
    value           = value-string / quoted-string / ext-value
    ext-value       = "=" charset "'" [ language ] "'" value-chars
                    ; like [](#RFC5987)

The 'codechar' above may refer to any uppercase letter; codes in common use
throughout the Clacks network are defined in [](#POSTAL).

## The Accept-Clacks header field

A Clacks-capable client SHOULD include in HTTP requests an Accept-Clacks
header indicating the Clacks codes and encodings it recognizes. If a
valid Accept-Clacks header is received by a server then it MUST NOT
send Overhead message codes that are not indicated by the Accept-Clacks
header.

    Accept-Clacks  = clacks-code RWS clacks-encodings
    clacks-encodings = "*" / ( token *( "/" token ) )

A Clacks-capable client MUST support "Plain" encoding. Other commonly used encodings are "RKN" Reverse-Klatchian Notation, and "Ook!" also known as Simian Computer System for Information Interchange [SCSII](Stibbons, P., "Simian Computer Sourcebook"", Unseen University Press) that is only used by the Clacks tower at Unseen University. 

## Examples

    HTTP/1.1 200 OK
    Clacks: GNU John Dearheart

# IANA Considerations

The 'Clacks' header field has been added to the "Permanent Message Header
Field Names" registry defined in [](#RFC3864).
FIXME: not submitted yet

    Header field name: Clacks
    
    Applicable Protocol: HTTP
    
    Status: Standard
    
    Author: Sir Terry Pratchett (posthumously)
    
    Change controller: IETF
    
    Specification document: this specification

# Environmental Considerations

As noted in Section TODO, a Clacks message sent via the traditional semaphore
network represents a significant expenditure of energy, not only in the
operation of the signalling panels, but in manual verification and message
passing. It is self-evident that this specification provides for a high
level of efficiency, utilizing existing infrastructure to provide the seamless
interaction that users of the Clacks network have come to expect.

# Security Considerations

This document represents an extension to [](#RFC7230) and all security considerations therein, or in documents updating or replacing that document, also apply to this one.

# Proxy considerations
Since all Clacks messages are effectively point-to-point transmissions there is very limited scope for multiple User-Agents to require the same message. Due to this any message with the Clacks header MUST be considered equivalent to the no-cache header defined in [](#RFC7234) Section 5.2.1.4 this allows for the cache to store the object as long as it is revalidated prior to sending.

#User-Agent considerations
A user-agent should follow the Grand Trunk Clacks standards [GTSC-CLACKS](Grand Trunk Semaphore Company, "Clacks Operator's Book") for Overhead definition. 

Since the Clacks to HTTP gateway is expected to be a human (or Dwarf, Troll, etc.) operated process User-Agents need to cope with long session availability to provide the necessary time window to allow the message to be input.

# IP-SFS Tunnelling 
The Clacks-over-HTTP protocol makes available the option of tunnelling proprietary Clacks messages over an IP-SFS based network to allow for interconnection of different operator networks. 
