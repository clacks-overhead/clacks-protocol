# Introduction

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc subcompact="no"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>

While IP-SFS [](#RFC4824) makes it possible to transmit Internet protocols
over semaphore signaling systems such as Clacks, the reverse is not always
the case. Information sent in the overhead may be lost when Clacks messages
are sent using HTTP.

This document specifies HTTP headers for transmitting overhead messages
that originate or are intended for Clacks towers.

## Syntax Notation

This specification uses the Augmented Backus-Naur Form (ABNF) notation of [](#RFC5234)
and includes, by reference, the "token", "word", "OWS", and "BWS" rules and
the #rule extension as defined within Sections 3.2.1 and 3.2.4 of [](#RFC7230).

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
interpreted as described in [](#RFC2119).

# The Clacks Protocol

Clacks is a semaphore signaling system invented by Robert Dearheart. It is the primary means of communication between city-states along The Grand Trunk. Like most protocols Clacks has a Header (called the Overhead) and Payload. The Overhead contains information about (among other things) source, destination, message detail, logging, and mechanism control. This document doesn't define the Clacks protocol, only it's delivery over HTTP. The Clacks protocol definition is owned by The Grand Trunk Semaphore Company, Ankh Morpork.

TODO: Fill this out

# Clacks over HTTP Protocol Additions

The Clacks over HTTP extension specifies one header field which MAY be included
in a HTTP request or response.

## The Clacks response field

The Clacks header field is used to transmit overhead messages in a HTTP
response, and MAY be accepted by a server confirming to this specification.
It is specified as follows:

    Clacks          = 1#clacks-overhead
    clacks-overhead = clacks-code [ RWS tower-address ] RWS value
    tower-address   = token
    clacks-code     = 1*codechar
    codechar        = ALPHA
    value           = value-string / quoted-string / ext-value
    ext-value       = "=" charset "'" [ language ] "'" value-chars
                    ; like [](#RFC5987)

The 'codechar' above may refer to any uppercase letter; codes in common use
throughout the Clacks network are defined in [](#POSTAL).

### Examples

    HTTP/1.1 200 OK
    Clacks: GNU John Dearheart

# IANA Considerations

The 'Clacks' header field has been added to the "Permanent Message Header
Field Names" registry defined in [](#RFC3864).
FIXME: not submitted yet

    Header field name: Clacks
    
    Applicable Protocol: HTTP
    
    Status: Standard
    
    Author: Terry Pratchett (posthumously)
    
    Change controller: IETF
    
    Specification document: this specification

# Environmental Considerations

As noted in Section TODO, a Clacks message sent via the traditional semaphore
network represents a significant expenditure of energy, not only in the
operation of the signalling panels, but in manual verification and message
passing. It is self-evident that this specification provides for a high
level of efficiency, utilizing existing infrastructure to provide the seamless
interaction that users of the Clacks network have come to expect.

# Security Considerations

This document represents an extension to [](#RFC7230) and all security considerations therein, or in documents updating or replacing that document, also apply to this one.

# Proxy considerations
Since all Clacks messages are effectivly point-to-point transmissions there is very limited scope for multiple User-Agents to require the same message. Due to this any message with the Clacks-overhead header MUST be considered equivalent to the no-cache header defined in [RFC7234](#RFC7234) Section 5.2.1.4 this allows for the cache to store the object as long as it is revalidated prior to sending.

# User-Agent considerations
A user-agent should follow the Grand Trunk Clacks standards. For example any User-Agent recieving a Clacks-overhead message with a U code should respond to the server with the same Clacks-Overhead header on it's next request.

